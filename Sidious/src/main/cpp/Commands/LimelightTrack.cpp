// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/LimelightTrack.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

LimelightTrack::LimelightTrack(): frc::Command() {
    // Use Requires() here to declare subsystem dependencies
    // eg. Requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::vision.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void LimelightTrack::Initialize() {

std::cout << "Limelight Tracking!" << std::endl;

Robot::vision->setCameraMode(0);
Robot::vision->setLedMode(3);
Robot::vision->setPipeline(1);

/*m_steeringKP = frc::SmartDashboard::GetNumber("Steering KP", 0.0);
m_targetArea = frc::SmartDashboard::GetNumber("min TA", 0.0);
m_driveKP = frc::SmartDashboard::GetNumber("Driving KP", 0.0);

frc::SmartDashboard::PutNumber("Left", 10000);
frc::SmartDashboard::PutNumber("Right", 10000);
*/

}

// Called repeatedly when this Command is scheduled to run
void LimelightTrack::Execute() {

double steer = Robot::vision->getTx()*m_steeringKP; // Right Y
double drive  = -1*(m_targetArea-Robot::vision->getTa())*m_driveKP; // Left X
frc::SmartDashboard::PutNumber("target area", Robot::vision->getTa());
frc::SmartDashboard::PutNumber("Drive", drive);
frc::SmartDashboard::PutNumber("Steer", steer);
frc::SmartDashboard::PutNumber("Horizontal Offset", Robot::vision->getTx());

    if (Robot::vision->getTv()) 
    {
      if (Robot::vision->getTa() >= m_targetArea) 
      { 
        drive = 0.0;
        steer = 0.0;
      }
    } 
    else
    {
     drive = 0.0;
     steer = 0.0;
    }

    Robot::drivetrain->autoDrive(steer, drive);
  }

// Make this return true when this Command no longer needs to run execute()
bool LimelightTrack::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void LimelightTrack::End() {
    //Robot::vision->setLedMode(3);

    Robot::drivetrain->stopMotors();
    Robot::drivetrain->setInvert(false, true);
    Robot::drivetrain->initMotors();

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void LimelightTrack::Interrupted() {
    End();
}
