// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/SetVelocityWithLimelight.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

SetVelocityWithLimelight::SetVelocityWithLimelight(): frc::Command() {
    // Use Requires() here to declare subsystem dependencies
    // eg. Requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::vision.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

    Requires(Robot::shooter.get());
    Requires(Robot::drivetrain.get());
}

//IF ROBOT BUILDER DELETES "Requires(Robot::shooter.get());", PLEASE ADD IT BACK IN :)


// Called just before this Command runs the first time
void SetVelocityWithLimelight::Initialize() {

std::cout << "Limelight Tracking!" << std::endl;

Robot::vision->setCameraMode(0);
Robot::vision->setLedMode(3);
Robot::vision->setPipeline(1);



}

// Called repeatedly when this Command is scheduled to run
void SetVelocityWithLimelight::Execute() {

double xOffsetGoal = 3.0;   //this is the angle we want to be within when we shoot. we may never get there is speed factor is too low suffer
double m_steeringKP = 0.055;
double m_driveKP = 1.0;
double speedFactor = 0.5;

while(Robot::vision->getTx() > xOffsetGoal || Robot::vision->getTx() < -1.0*xOffsetGoal){

double steer = Robot::vision->getTx()*m_steeringKP*speedFactor; // Right Y
frc::SmartDashboard::PutNumber("target area", Robot::vision->getTa());
frc::SmartDashboard::PutNumber("Steer", steer);
frc::SmartDashboard::PutNumber("Horizontal Offset", Robot::vision->getTx());


    Robot::drivetrain->autoDrive(steer, 0.0);

}

double area = Robot::vision->getTa();

double nearGoal = 2.5;
double midGoal = 1.8;
double farGoal = 0.7;

double nearVelocity = 5000;
double midVelocity = 5500;
double farVelocity = 6000;

if (area >= nearGoal){
    Robot::shooter->RunShooterAtVelocity(nearVelocity);
    }
else if(area < nearGoal && area >= midGoal){
    Robot::shooter->RunShooterAtVelocity(midVelocity);
    }
else if( area <= farGoal){
    Robot::shooter->RunShooterAtVelocity(farVelocity);
    }
else{
    Robot::shooter->RunShooterAtVelocity(0.0);
    }
}

// Make this return true when this Command no longer needs to run execute()
bool SetVelocityWithLimelight::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void SetVelocityWithLimelight::End() {

    Robot::shooter->RunShooterAtVelocity(0.0);

    Robot::drivetrain->stopMotors();
    Robot::drivetrain->setInvert(false, true);
    Robot::drivetrain->initMotors();


}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void SetVelocityWithLimelight::Interrupted() {
    End();
}
