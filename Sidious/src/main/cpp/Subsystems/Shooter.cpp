// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Shooter.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/RunShooter.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Shooter::Shooter() : frc::Subsystem("Shooter") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
shooterFalcon.reset(new WPI_TalonFX(6));



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Shooter::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new RunShooter(0.0));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    shooterFalcon->ConfigSelectedFeedbackSensor(FeedbackDevice::IntegratedSensor);

    shooterFalcon->SetNeutralMode(NeutralMode::Brake);
    shooterFalcon->SetInverted(true);

    shooterFalcon->Config_kF(0, kF, kTimeout);
    shooterFalcon->Config_kP(0, kP, kTimeout);
    shooterFalcon->Config_kI(0, kI, kTimeout);
    shooterFalcon->Config_kD(0, kD, kTimeout);
    

}

void Shooter::Periodic() {
    // Put code here to be run every loop

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Shooter::RunShooterAtVelocity(double velocity)
{

    if(velocity > 0.0)
    {
        shooterFalcon->Set(ControlMode::Velocity, VelocityToTicks(velocity));
        double v_data = shooterFalcon->GetSelectedSensorVelocity();
        v_data = TicksToVelocity(v_data);
        frc::SmartDashboard::PutNumber("Shooter_Velocity", v_data);

    }

    else
    {
        shooterFalcon->Set(ControlMode::PercentOutput, 0.0);
    }

}


double Shooter::VelocityToTicks(double velocity)
{

    double _velocity;

   _velocity = velocity * 2048.0 * kGearRatio / 600.0; //This will be in Pulses per 100 ms.

    return _velocity;

}

double Shooter::TicksToVelocity(double ticks)
{
    double _ticks;
    
    _ticks = ticks / kGearRatio / 2048.0 * 600.0; //This will be in RPM

    return _ticks;
}


/*
void Shooter::manualShooter(std::shared_ptr<frc::Joystick>systemsController)
{

    double Rtrigger = systemsController->GetRawAxis(3);
    double Ltrigger = systemsController->GetRawAxis(2);

    if (fabs(Rtrigger) < 0.1)
    {
        Rtrigger = 0.0;
    }

    if (fabs(Ltrigger) < 0.1)
    {
        Ltrigger = 0.0;
    }

    if(Rtrigger > 0.1 && !(Ltrigger > 0.1))

    {
        leftFalcon->Set(ControlMode::PercentOutput, Rtrigger);
    }

    if(Ltrigger > 0.1 && !(Rtrigger > 0.1))
    {
        leftFalcon->Set(ControlMode::PercentOutput, (Ltrigger * -1));
    }

}

*/

